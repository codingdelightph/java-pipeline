node {
    
     parameters {
        string(defaultValue: 'codingdelightph',  name: 'DOCKER_USERNAME', trim: true)
        string(defaultValue: '',  name: 'DOCKER_PASSWORD',  trim: true)
        string(defaultValue: 'https://github.com/codingdelightph/java-pipeline.git',  name: 'GITHUB_URL',  trim: true)
    }
    
    def app

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        //app = docker.build("codingdelightph/sample-java")
        sh  "docker build -t codingdelightph/sample-java ."
        
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        app.inside {
            sh 'echo "Tests passed"'
        }
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. 
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
        */
     docker.withRegistry('https://registry.hub.docker.com', 
        'docker-hub-credentials') {
          
      }  
    }
}
